import logging
import requests

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    filters,
    ApplicationBuilder,
    MessageHandler,
    CommandHandler,
    ContextTypes,
    CallbackContext,
    CallbackQueryHandler,
)

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)

OPTION = None
host_server = "http://localhost:8080"  # TODO make env
bot_token = "7174358430:AAH1Y7BX5B0ZN6kTxlG6U3rpwsljeDp4R6U"
admins = [749179973, 5006572203, 5519831621]

keyboard_options = [
    [InlineKeyboardButton("check", callback_data="check")],
    [InlineKeyboardButton("add", callback_data="add")],
    [InlineKeyboardButton("change", callback_data="change")],
    [InlineKeyboardButton("delete", callback_data="delete")],
]

app = ApplicationBuilder().token(bot_token).build()


async def start(update: Update, context: CallbackContext) -> None:
    is_admin = update.effective_user.id in admins
    if not is_admin:
        text = "Вы не включены в список админов, обратитесь к @oh_darlin"
        await update.message.reply_text(text)
    else:
        text = "Options"
        await update.message.reply_text(
            text,
            reply_markup=InlineKeyboardMarkup(
                keyboard_options,
            ),
        )


async def admin_options(update: Update, context: CallbackContext) -> None:
    global OPTION
    query = update.callback_query
    OPTION = query

    match query.data:
        case "check":
            await check(query)
            pass


# async def handle_input(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
#     user_input = update.message.text
#     print("I AM WRITING", user_input)


async def check(query) -> None:
    try:
        resp = requests.get(host_server + "/urls/list")
        text = ""
        m = resp.json()
        for k, v in m.items():
            text = f"{text}{k} | {v}\n"
        await query.edit_message_text(
            text=text,
            reply_markup=InlineKeyboardMarkup(keyboard_options),
            disable_web_page_preview=True,
        )
    except requests.RequestException as e:
        await query.message.reply_text(
            "При попытке получить URL-адреса произошла ошибка",
            reply_markup=InlineKeyboardMarkup(keyboard_options),
        )


async def change(query) -> None:
    try:
        resp = requests.patch(host_server + "/urls/list")
        options = []
        m = resp.json()

        for k, v in m.items():
            # text = f"{text}{k} | {v}\n"
            options.append([InlineKeyboardButton(k, callback_data=k)])

        await query.edit_message_text(
            text="select which to change",
            reply_markup=InlineKeyboardMarkup(options),
            disable_web_page_preview=True,
        )
    except requests.RequestException as e:
        await query.message.reply_text(
            "При попытке получить URL-адреса произошла ошибка",
            reply_markup=InlineKeyboardMarkup(keyboard_options),
        )


# async def handle_input(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
#     user_input = update.message.text
#     new_url = user_input
#     match QUERY.data:
#         case "change_url_twitter":
#             await change_url("twitter", new_url)
#         case "change_url_dex":
#             await change_url("dex", new_url)
#         case "change_url_tground":
#             await change_url("tground", new_url)
#
#
# async def change_url(to, user_input):
#     resp = requests.put(f"{host_server}/urls/change?to={to}&url={user_input}")
#     if resp.status_code == 200:
#         await QUERY.edit_message_text(
#             f"{to} URL changed. ✅", reply_markup=InlineKeyboardMarkup(keyboard_options)
#         )
#     else:
#         await QUERY.edit_message_text(
#             f"Error changing {to} URL. ❌",
#             reply_markup=InlineKeyboardMarkup(keyboard_options),
#         )


app.add_handler(CommandHandler("start", start))
app.add_handler(CallbackQueryHandler(admin_options))
# app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_input))

app.run_polling()
